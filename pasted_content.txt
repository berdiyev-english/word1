В общем тебе нужно будет ознакомиться с кодом приложения для изучения английских слов , он работает на github в виде сайта:

Index.html : 

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>English Words - Изучение английских слов</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <div class="app-container">
        <!-- Header -->
        <header class="app-header">
            <div class="header-content">
                <h1 class="app-title">English Words</h1>
                <div class="header-actions">
                    <button class="theme-toggle" id="themeToggle">
                        <i class="fas fa-moon"></i>
                    </button>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="main-content">
            <!-- About Section -->
            <section id="about" class="content-section active">
                <div class="section-header">
                    <h2>О приложении</h2>
                </div>
                <div class="about-content">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-graduation-cap"></i>
                        </div>
                        <h3>Изучение по уровням</h3>
                        <p>Структурированное изучение английских слов от начального до продвинутого уровня (A1-C2)</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-volume-up"></i>
                        </div>
                        <h3>Произношение</h3>
                        <p>Прослушивание правильного произношения слов с британским и американским акцентом</p>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <h3>Отслеживание прогресса</h3>
                        <p>Ведите учет изученных слов и отслеживайте свой прогресс в изучении языка</p>
                    </div>
                    
                    <div class="author-info">
                        <h3>Об авторе методики</h3>
                        <p>Приложение создано на основе методики <strong>Абдуррахима Бердиева</strong> - одного из лучших преподавателей английского языка.</p>
                        <a href="https://berdiyev-eng.tilda.ws/" target="_blank" class="author-link">
                            <i class="fas fa-external-link-alt"></i>
                            Узнать больше об авторе
                        </a>
                    </div>
                    
                    <div class="data-management">
                        <h3>Управление данными</h3>
                        <div class="data-buttons">
                            <button class="data-btn export-btn" onclick="app.exportData()">
                                <i class="fas fa-download"></i>
                                Экспорт данных
                            </button>
                            <label class="data-btn import-btn">
                                <i class="fas fa-upload"></i>
                                Импорт данных
                                <input type="file" id="importFile" accept=".json" style="display: none;" onchange="app.importData(event)">
                            </label>
                            <button class="data-btn clear-btn" onclick="app.clearAllData()">
                                <i class="fas fa-trash"></i>
                                Очистить данные
                            </button>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Words by Levels Section -->
            <section id="levels" class="content-section">
                <div class="section-header">
                    <h2>Слова по уровням</h2>
                </div>
                <div class="levels-grid">
                    <div class="level-card" data-level="A1">
                        <div class="level-badge beginner">A1</div>
                        <h3>Beginner</h3>
                        <p>Базовые слова для начинающих</p>
                        <div class="level-stats">
                            <span class="word-count">20 слов</span>
                        </div>
                    </div>
                    
                    <div class="level-card" data-level="A2">
                        <div class="level-badge elementary">A2</div>
                        <h3>Elementary</h3>
                        <p>Элементарный уровень</p>
                        <div class="level-stats">
                            <span class="word-count">20 слов</span>
                        </div>
                    </div>
                    
                    <div class="level-card" data-level="B1">
                        <div class="level-badge intermediate">B1</div>
                        <h3>Intermediate</h3>
                        <p>Средний уровень</p>
                        <div class="level-stats">
                            <span class="word-count">20 слов</span>
                        </div>
                    </div>
                    
                    <div class="level-card" data-level="B2">
                        <div class="level-badge upper-intermediate">B2</div>
                        <h3>Upper-Intermediate</h3>
                        <p>Выше среднего</p>
                        <div class="level-stats">
                            <span class="word-count">20 слов</span>
                        </div>
                    </div>
                    
                    <div class="level-card" data-level="C1">
                        <div class="level-badge advanced">C1</div>
                        <h3>Advanced</h3>
                        <p>Продвинутый уровень</p>
                        <div class="level-stats">
                            <span class="word-count">20 слов</span>
                        </div>
                    </div>
                    
                    <div class="level-card" data-level="C2">
                        <div class="level-badge proficiency">C2</div>
                        <h3>Proficiency</h3>
                        <p>Профессиональный уровень</p>
                        <div class="level-stats">
                            <span class="word-count">20 слов</span>
                        </div>
                    </div>
                </div>
                
                <!-- Words List -->
                <div id="wordsContainer" class="words-container hidden">
                    <div class="words-header">
                        <button class="back-btn" id="backToLevels">
                            <i class="fas fa-arrow-left"></i>
                            Назад к уровням
                        </button>
                        <h3 id="currentLevelTitle">Слова уровня A1</h3>
                    </div>
                    <div id="wordsList" class="words-list">
                        <!-- Words will be populated by JavaScript -->
                    </div>
                </div>
            </section>

            <!-- Learning Words Section -->
            <section id="learning" class="content-section">
                <div class="section-header">
                    <h2>Изучаемые слова</h2>
                    <div class="section-stats">
                        <span id="learningCount">0 слов</span>
                    </div>
                </div>
                <div id="learningWordsList" class="words-list">
                    <div class="empty-state">
                        <i class="fas fa-book-open"></i>
                        <h3>Пока нет слов для изучения</h3>
                        <p>Добавьте слова из списка по уровням или создайте новые</p>
                    </div>
                </div>
            </section>

            <!-- New Words Section -->
            <section id="new-words" class="content-section">
                <div class="section-header">
                    <h2>Новые слова</h2>
                </div>
                <div class="add-word-form">
                    <div class="form-group">
                        <label for="newWord">Английское слово</label>
                        <input type="text" id="newWord" placeholder="Введите слово на английском">
                    </div>
                    <div class="form-group">
                        <label for="newTranslation">Перевод</label>
                        <input type="text" id="newTranslation" placeholder="Введите перевод">
                    </div>
                    <div class="form-group">
                        <label for="newLevel">Уровень</label>
                        <select id="newLevel">
                            <option value="A1">A1 - Beginner</option>
                            <option value="A2">A2 - Elementary</option>
                            <option value="B1">B1 - Intermediate</option>
                            <option value="B2">B2 - Upper-Intermediate</option>
                            <option value="C1">C1 - Advanced</option>
                            <option value="C2">C2 - Proficiency</option>
                        </select>
                    </div>
                    <button class="add-word-btn" id="addWordBtn">
                        <i class="fas fa-plus"></i>
                        Добавить слово
                    </button>
                </div>
                
                <div id="customWordsList" class="words-list">
                    <h3>Добавленные слова</h3>
                    <div id="customWords">
                        <div class="empty-state">
                            <i class="fas fa-plus-circle"></i>
                            <h3>Нет добавленных слов</h3>
                            <p>Используйте форму выше для добавления новых слов</p>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <!-- Bottom Navigation -->
        <nav class="bottom-nav">
            <button class="nav-item active" data-section="about">
                <i class="fas fa-info-circle"></i>
                <span>О приложении</span>
            </button>
            <button class="nav-item" data-section="levels">
                <i class="fas fa-layer-group"></i>
                <span>Уровни</span>
            </button>
            <button class="nav-item" data-section="learning">
                <i class="fas fa-book-reader"></i>
                <span>Изучаю</span>
            </button>
            <button class="nav-item" data-section="new-words">
                <i class="fas fa-plus"></i>
                <span>Новые</span>
            </button>
        </nav>
    </div>

    <!-- Audio Element -->
    <audio id="audioPlayer" preload="none"></audio>

    <!-- Scripts -->
    <script src="oxford_words_data.js"></script>
    <script src="app.js"></script>
</body>
</html>

-----

app.js : 

// English Words App - Main JavaScript File

class EnglishWordsApp {
    constructor() {
        this.currentSection = 'about';
        this.currentLevel = null;
        this.learningWords = [];
        this.customWords = [];
        this.audioPlayer = document.getElementById('audioPlayer');
        this.currentAudioUrl = null;
        
        this.init();
    }

    init() {
        this.loadData();
        this.migrateExistingWords(); // Migrate existing words to new format
        this.setupEventListeners();
        this.updateUI();
        this.setupTheme();
    }

    // Data Management
    loadData() {
        try {
            const savedLearning = localStorage.getItem('learningWords');
            const savedCustom = localStorage.getItem('customWords');
            
            if (savedLearning) {
                this.learningWords = JSON.parse(savedLearning);
            }
            
            if (savedCustom) {
                this.customWords = JSON.parse(savedCustom);
            }
        } catch (error) {
            console.error('Error loading data:', error);
        }
    }

    saveData() {
        try {
            const dataToSave = {
                learningWords: this.learningWords,
                customWords: this.customWords,
                lastSaved: new Date().toISOString(),
                version: '1.0'
            };
            
            localStorage.setItem('englishWordsApp', JSON.stringify(dataToSave));
            localStorage.setItem('learningWords', JSON.stringify(this.learningWords));
            localStorage.setItem('customWords', JSON.stringify(this.customWords));
            
            // Save statistics
            this.saveStatistics();
        } catch (error) {
            console.error('Error saving data:', error);
            this.showNotification('Ошибка сохранения данных', 'error');
        }
    }

    saveStatistics() {
        const stats = {
            totalWordsLearned: this.learningWords.filter(w => w.isLearned).length,
            totalWordsLearning: this.learningWords.length,
            customWordsAdded: this.customWords.length,
            lastActivity: new Date().toISOString(),
            dailyProgress: this.getDailyProgress()
        };
        
        localStorage.setItem('appStatistics', JSON.stringify(stats));
    }

    getDailyProgress() {
        const today = new Date().toDateString();
        const todayWords = this.learningWords.filter(w => 
            w.dateLearned && new Date(w.dateLearned).toDateString() === today
        );
        return todayWords.length;
    }

    exportData() {
        try {
            const exportData = {
                learningWords: this.learningWords,
                customWords: this.customWords,
                exportDate: new Date().toISOString(),
                appVersion: '1.0'
            };
            
            const dataStr = JSON.stringify(exportData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `english-words-backup-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            this.showNotification('Данные экспортированы', 'success');
        } catch (error) {
            console.error('Export error:', error);
            this.showNotification('Ошибка экспорта данных', 'error');
        }
    }

    importData(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importData = JSON.parse(e.target.result);
                
                if (importData.learningWords && importData.customWords) {
                    // Merge with existing data
                    const existingLearning = new Set(this.learningWords.map(w => w.word));
                    const existingCustom = new Set(this.customWords.map(w => w.word));
                    
                    let newLearningCount = 0;
                    let newCustomCount = 0;
                    
                    importData.learningWords.forEach(word => {
                        if (!existingLearning.has(word.word)) {
                            this.learningWords.push(word);
                            newLearningCount++;
                        }
                    });
                    
                    importData.customWords.forEach(word => {
                        if (!existingCustom.has(word.word)) {
                            this.customWords.push(word);
                            newCustomCount++;
                        }
                    });
                    
                    this.saveData();
                    this.updateUI();
                    this.showNotification(`Импортировано: ${newLearningCount} изучаемых слов, ${newCustomCount} пользовательских слов`, 'success');
                } else {
                    this.showNotification('Неверный формат файла', 'error');
                }
            } catch (error) {
                console.error('Import error:', error);
                this.showNotification('Ошибка импорта данных', 'error');
            }
        };
        reader.readAsText(file);
    }

    clearAllData() {
        if (confirm('Вы уверены, что хотите удалить все данные? Это действие нельзя отменить.')) {
            localStorage.removeItem('englishWordsApp');
            localStorage.removeItem('learningWords');
            localStorage.removeItem('customWords');
            localStorage.removeItem('appStatistics');
            
            this.learningWords = [];
            this.customWords = [];
            this.updateUI();
            this.renderLearningWords();
            this.renderCustomWords();
            
            this.showNotification('Все данные удалены', 'info');
        }
    }

    // Theme Management
    setupTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        this.updateThemeIcon(savedTheme);
    }

    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        this.updateThemeIcon(newTheme);
    }

    updateThemeIcon(theme) {
        const themeIcon = document.querySelector('#themeToggle i');
        themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
    }

    // Event Listeners
    setupEventListeners() {
        // Navigation
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const section = e.currentTarget.dataset.section;
                this.switchSection(section);
            });
        });

        // Theme toggle
        document.getElementById('themeToggle').addEventListener('click', () => {
            this.toggleTheme();
        });

        // Level cards
        document.querySelectorAll('.level-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const level = e.currentTarget.dataset.level;
                this.showLevelWords(level);
            });
        });

        // Back to levels button
        document.getElementById('backToLevels').addEventListener('click', () => {
            this.hideLevelWords();
        });

        // Add word form
        document.getElementById('addWordBtn').addEventListener('click', () => {
            this.addCustomWord();
        });

        // Enter key for add word form
        document.getElementById('newWord').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                document.getElementById('newTranslation').focus();
            }
        });

        document.getElementById('newTranslation').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.addCustomWord();
            }
        });
    }

    // Navigation
    switchSection(sectionName) {
        // Update navigation
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`[data-section="${sectionName}"]`).classList.add('active');

        // Update content
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(sectionName).classList.add('active');

        this.currentSection = sectionName;

        // Update section-specific content
        if (sectionName === 'learning') {
            this.renderLearningWords();
        } else if (sectionName === 'new-words') {
            this.renderCustomWords();
        }
    }

    // Level Words Management
    showLevelWords(level) {
        this.currentLevel = level;
        const wordsContainer = document.getElementById('wordsContainer');
        const levelsGrid = document.querySelector('.levels-grid');
        const currentLevelTitle = document.getElementById('currentLevelTitle');
        
        // Hide levels grid and show words container
        levelsGrid.style.display = 'none';
        wordsContainer.classList.remove('hidden');
        
        // Update title
        currentLevelTitle.textContent = `Слова уровня ${level}`;
        
        // Render words
        this.renderLevelWords(level);
    }

    hideLevelWords() {
        const wordsContainer = document.getElementById('wordsContainer');
        const levelsGrid = document.querySelector('.levels-grid');
        
        // Show levels grid and hide words container
        levelsGrid.style.display = 'grid';
        wordsContainer.classList.add('hidden');
        
        this.currentLevel = null;
    }

    renderLevelWords(level) {
        const wordsList = document.getElementById('wordsList');
        const words = oxfordWordsDatabase[level] || [];
        
        if (words.length === 0) {
            wordsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-book"></i>
                    <h3>Нет слов для этого уровня</h3>
                    <p>Слова для уровня ${level} пока не добавлены</p>
                </div>
            `;
            return;
        }

        wordsList.innerHTML = words.map(wordData => {
            const isLearning = this.learningWords.some(w => w.word === wordData.word);
            
            return `
                <div class="word-card">
                    <div class="word-header">
                        <span class="word-text">${wordData.word}</span>
                        <div class="word-actions">
                            <button class="action-btn play-btn" onclick="app.playAudio('${wordData.word}')" title="Прослушать произношение">
                                <i class="fas fa-play"></i>
                            </button>
                            ${!isLearning ? `
                                <button class="action-btn add-btn" onclick="app.addToLearning('${wordData.word}', '${wordData.translation}', '${level}')" title="Добавить в изучение">
                                    <i class="fas fa-plus"></i>
                                </button>
                            ` : `
                                <button class="action-btn remove-btn" onclick="app.removeFromLearning('${wordData.word}')" title="Убрать из изучения">
                                    <i class="fas fa-minus"></i>
                                </button>
                            `}
                        </div>
                    </div>
                    <div class="word-translation">${wordData.translation}</div>
                    <div class="word-level">${level} • ${wordData.category}</div>
                </div>
            `;
        }).join('');
    }

    // Learning Words Management
    addToLearning(word, translation, level) {
        const existingWord = this.learningWords.find(w => w.word === word);
        if (existingWord) {
            this.showNotification('Слово уже добавлено в изучение', 'warning');
            return;
        }

        const newWord = {
            id: Date.now().toString(),
            word: word,
            translation: translation,
            level: level,
            dateAdded: new Date().toISOString(),
            isLearned: false,
            // Spaced repetition data
            repetitionData: {
                easeFactor: 2.5,
                interval: 1,
                repetitions: 0,
                nextReview: new Date().toISOString(),
                lastReview: null,
                correctAnswers: 0,
                totalAnswers: 0,
                difficulty: 0 // 0 = easy, 1 = medium, 2 = hard
            }
        };

        this.learningWords.push(newWord);
        this.saveData();
        this.updateUI();
        this.showNotification('Слово добавлено в изучение', 'success');

        // Update current view if showing level words
        if (this.currentLevel) {
            this.renderLevelWords(this.currentLevel);
        }
    }

    removeFromLearning(word) {
        this.learningWords = this.learningWords.filter(w => w.word !== word);
        this.saveData();
        this.updateUI();
        this.showNotification('Слово убрано из изучения', 'info');

        // Update current view
        if (this.currentSection === 'learning') {
            this.renderLearningWords();
        } else if (this.currentLevel) {
            this.renderLevelWords(this.currentLevel);
        }
    }

    markAsLearned(word) {
        const wordObj = this.learningWords.find(w => w.word === word);
        if (wordObj) {
            wordObj.isLearned = true;
            wordObj.dateLearned = new Date().toISOString();
            this.saveData();
            this.updateUI();
            this.showNotification('Слово отмечено как изученное', 'success');
            this.renderLearningWords();
        }
    }

    renderLearningWords() {
        const learningWordsList = document.getElementById('learningWordsList');
        const learningCount = document.getElementById('learningCount');
        
        // Get words that need review
        const wordsForReview = this.getWordsForReview();
        learningCount.textContent = `${this.learningWords.length} слов (${wordsForReview.length} для повторения)`;

        if (this.learningWords.length === 0) {
            learningWordsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-book-open"></i>
                    <h3>Пока нет слов для изучения</h3>
                    <p>Добавьте слова из списка по уровням или создайте новые</p>
                </div>
            `;
            return;
        }

        if (wordsForReview.length === 0) {
            learningWordsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-clock"></i>
                    <h3>Все слова изучены на сегодня!</h3>
                    <p>Возвращайтесь позже для повторения</p>
                    <button class="show-all-words-btn" onclick="app.showAllLearningWords()">
                        <i class="fas fa-list"></i>
                        Показать все слова
                    </button>
                </div>
            `;
            return;
        }

        // Show current word for review
        this.currentReviewIndex = 0;
        this.currentReviewWords = wordsForReview;
        this.showReviewCard();
    }

    getWordsForReview() {
        const now = new Date();
        return this.learningWords.filter(word => {
            if (word.isLearned) return false;
            const nextReview = new Date(word.repetitionData.nextReview);
            return nextReview <= now;
        }).sort((a, b) => {
            // Sort by difficulty (harder words first) and then by next review date
            if (a.repetitionData.difficulty !== b.repetitionData.difficulty) {
                return b.repetitionData.difficulty - a.repetitionData.difficulty;
            }
            return new Date(a.repetitionData.nextReview) - new Date(b.repetitionData.nextReview);
        });
    }

    showReviewCard() {
        const learningWordsList = document.getElementById('learningWordsList');
        const currentWord = this.currentReviewWords[this.currentReviewIndex];
        
        if (!currentWord) {
            this.renderLearningWords();
            return;
        }

        const progress = this.currentReviewIndex + 1;
        const total = this.currentReviewWords.length;
        const accuracy = currentWord.repetitionData.totalAnswers > 0 
            ? Math.round((currentWord.repetitionData.correctAnswers / currentWord.repetitionData.totalAnswers) * 100)
            : 0;

        learningWordsList.innerHTML = `
            <div class="review-container">
                <div class="review-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${(progress / total) * 100}%"></div>
                    </div>
                    <span class="progress-text">${progress} из ${total}</span>
                </div>
                
                <div class="review-card" id="reviewCard">
                    <div class="card-front">
                        <div class="word-display">
                            <h2 class="review-word">${currentWord.word}</h2>
                            <div class="word-level">${currentWord.level}</div>
                            <div class="word-stats">
                                <span class="accuracy">Точность: ${accuracy}%</span>
                                <span class="difficulty difficulty-${currentWord.repetitionData.difficulty}">
                                    ${this.getDifficultyText(currentWord.repetitionData.difficulty)}
                                </span>
                            </div>
                        </div>
                        
                        <div class="card-actions">
                            <button class="action-btn play-btn" onclick="app.playAudio('${currentWord.word}')" title="Прослушать произношение">
                                <i class="fas fa-play"></i>
                            </button>
                            <button class="btn btn-primary" onclick="app.showTranslation()">
                                Показать перевод
                            </button>
                        </div>
                    </div>
                    
                    <div class="card-back hidden">
                        <div class="translation-display">
                            <h2 class="review-word">${currentWord.word}</h2>
                            <h3 class="review-translation">${currentWord.translation}</h3>
                            <div class="word-level">${currentWord.level}</div>
                        </div>
                        
                        <div class="answer-buttons">
                            <button class="btn btn-danger" onclick="app.answerReview(false)">
                                <i class="fas fa-times"></i>
                                Не знаю
                            </button>
                            <button class="btn btn-warning" onclick="app.answerReview('partial')">
                                <i class="fas fa-question"></i>
                                Частично
                            </button>
                            <button class="btn btn-success" onclick="app.answerReview(true)">
                                <i class="fas fa-check"></i>
                                Знаю
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="review-controls">
                    <button class="btn btn-secondary" onclick="app.showAllLearningWords()">
                        Показать все слова
                    </button>
                    <button class="btn btn-secondary" onclick="app.skipWord()">
                        Пропустить
                    </button>
                </div>
            </div>
        `;
    }

    showTranslation() {
        const cardFront = document.querySelector('.card-front');
        const cardBack = document.querySelector('.card-back');
        
        cardFront.classList.add('hidden');
        cardBack.classList.remove('hidden');
    }

    answerReview(isCorrect) {
        const currentWord = this.currentReviewWords[this.currentReviewIndex];
        this.updateSpacedRepetition(currentWord, isCorrect);
        
        this.currentReviewIndex++;
        
        if (this.currentReviewIndex >= this.currentReviewWords.length) {
            this.showReviewComplete();
        } else {
            this.showReviewCard();
        }
    }

    skipWord() {
        this.currentReviewIndex++;
        
        if (this.currentReviewIndex >= this.currentReviewWords.length) {
            this.showReviewComplete();
        } else {
            this.showReviewCard();
        }
    }

    showReviewComplete() {
        const learningWordsList = document.getElementById('learningWordsList');
        const completedCount = this.currentReviewWords.length;
        
        learningWordsList.innerHTML = `
            <div class="review-complete">
                <div class="completion-icon">
                    <i class="fas fa-trophy"></i>
                </div>
                <h2>Отличная работа!</h2>
                <p>Вы завершили повторение ${completedCount} слов</p>
                <div class="completion-actions">
                    <button class="btn btn-primary" onclick="app.renderLearningWords()">
                        Продолжить изучение
                    </button>
                    <button class="btn btn-secondary" onclick="app.showAllLearningWords()">
                        Показать все слова
                    </button>
                </div>
            </div>
        `;
    }

    showAllLearningWords() {
        const learningWordsList = document.getElementById('learningWordsList');
        
        if (this.learningWords.length === 0) {
            learningWordsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-book-open"></i>
                    <h3>Пока нет слов для изучения</h3>
                    <p>Добавьте слова из списка по уровням или создайте новые</p>
                </div>
            `;
            return;
        }

        const learnedWords = this.learningWords.filter(w => w.isLearned);
        const learningWords = this.learningWords.filter(w => !w.isLearned);

        learningWordsList.innerHTML = `
            <div class="all-words-container">
                <div class="all-words-header">
                    <h3 class="all-words-title">Все слова (${this.learningWords.length})</h3>
                    <div class="words-filter">
                        <button class="filter-btn active" data-filter="all">Все</button>
                        <button class="filter-btn" data-filter="learning">Изучаю (${learningWords.length})</button>
                        <button class="filter-btn" data-filter="learned">Изучено (${learnedWords.length})</button>
                    </div>
                </div>
                
                <div class="learning-words-grid" id="wordsGrid">
                    ${this.renderAllWordsGrid(this.learningWords)}
                </div>
                
                <div class="completion-actions" style="margin-top: 2rem;">
                    <button class="completion-btn primary" onclick="app.renderLearningWords()">
                        <i class="fas fa-arrow-left"></i>
                        Вернуться к изучению
                    </button>
                </div>
            </div>
        `;

        // Add filter functionality
        const filterButtons = learningWordsList.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                // Update active button
                filterButtons.forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                
                // Filter words
                const filter = e.target.dataset.filter;
                let filteredWords = this.learningWords;
                
                if (filter === 'learning') {
                    filteredWords = learningWords;
                } else if (filter === 'learned') {
                    filteredWords = learnedWords;
                }
                
                document.getElementById('wordsGrid').innerHTML = this.renderAllWordsGrid(filteredWords);
            });
        });
    }

    renderAllWordsGrid(words) {
        if (words.length === 0) {
            return `
                <div class="empty-state">
                    <i class="fas fa-search"></i>
                    <h3>Нет слов в этой категории</h3>
                    <p>Попробуйте другой фильтр</p>
                </div>
            `;
        }

        return words.map(word => {
            const accuracy = word.repetitionData.totalAnswers > 0 
                ? Math.round((word.repetitionData.correctAnswers / word.repetitionData.totalAnswers) * 100)
                : 0;
            
            const progressWidth = Math.min(accuracy, 100);
            const difficultyText = this.getDifficultyText(word.repetitionData.difficulty);
            
            return `
                <div class="learning-word-card ${word.isLearned ? 'learned' : ''}">
                    <div class="learning-word-header">
                        <div>
                            <div class="learning-word-text">${word.word}</div>
                            <div class="learning-word-translation">${word.translation}</div>
                        </div>
                        <div class="word-actions">
                            <button class="action-btn play-btn" onclick="app.playAudio('${word.word}')" title="Прослушать произношение">
                                <i class="fas fa-play"></i>
                            </button>
                            ${!word.isLearned ? `
                                <button class="action-btn remove-btn" onclick="app.removeFromLearning('${word.word}')" title="Убрать из изучения">
                                    <i class="fas fa-minus"></i>
                                </button>
                            ` : ''}
                        </div>
                    </div>
                    
                    <div class="learning-word-meta">
                        <div class="word-progress">
                            <span>Точность: ${accuracy}%</span>
                            <div class="progress-indicator">
                                <div class="progress-fill-mini" style="width: ${progressWidth}%"></div>
                            </div>
                        </div>
                        <div class="word-level-info">
                            <span class="word-level">${word.level}</span>
                            <span class="difficulty-display ${difficultyText.toLowerCase()}">${difficultyText}</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    getDifficultyText(difficulty) {
        switch(difficulty) {
            case 0: return 'Легко';
            case 1: return 'Средне';
            case 2: return 'Сложно';
            default: return 'Новое';
        }
    }

    // Custom Words Management
    addCustomWord() {
        const wordInput = document.getElementById('newWord');
        const translationInput = document.getElementById('newTranslation');
        const levelSelect = document.getElementById('newLevel');

        const word = wordInput.value.trim().toLowerCase();
        const translation = translationInput.value.trim();
        const level = levelSelect.value;

        if (!word || !translation) {
            this.showNotification('Заполните все поля', 'error');
            return;
        }

        // Check if word already exists
        const existsInDatabase = Object.values(oxfordWordsDatabase).flat().some(w => w.word === word);
        const existsInCustom = this.customWords.some(w => w.word === word);

        if (existsInDatabase || existsInCustom) {
            this.showNotification('Это слово уже существует', 'warning');
            return;
        }

        const newWord = {
            id: Date.now().toString(),
            word: word,
            translation: translation,
            level: level,
            dateAdded: new Date().toISOString(),
            isCustom: true
        };

        this.customWords.push(newWord);
        this.saveData();
        this.renderCustomWords();
        this.showNotification('Слово добавлено', 'success');

        // Clear form
        wordInput.value = '';
        translationInput.value = '';
        levelSelect.value = 'A1';
    }

    removeCustomWord(wordId) {
        this.customWords = this.customWords.filter(w => w.id !== wordId);
        this.saveData();
        this.renderCustomWords();
        this.showNotification('Слово удалено', 'info');
    }

    renderCustomWords() {
        const customWordsContainer = document.getElementById('customWords');

        if (this.customWords.length === 0) {
            customWordsContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-plus-circle"></i>
                    <h3>Нет добавленных слов</h3>
                    <p>Используйте форму выше для добавления новых слов</p>
                </div>
            `;
            return;
        }

        customWordsContainer.innerHTML = this.customWords.map(wordData => {
            const isLearning = this.learningWords.some(w => w.word === wordData.word);
            
            return `
                <div class="word-card">
                    <div class="word-header">
                        <span class="word-text">${wordData.word}</span>
                        <div class="word-actions">
                            <button class="action-btn play-btn" onclick="app.playAudio('${wordData.word}')" title="Прослушать произношение">
                                <i class="fas fa-play"></i>
                            </button>
                            ${!isLearning ? `
                                <button class="action-btn add-btn" onclick="app.addToLearning('${wordData.word}', '${wordData.translation}', '${wordData.level}')" title="Добавить в изучение">
                                    <i class="fas fa-plus"></i>
                                </button>
                            ` : `
                                <button class="action-btn remove-btn" onclick="app.removeFromLearning('${wordData.word}')" title="Убрать из изучения">
                                    <i class="fas fa-minus"></i>
                                </button>
                            `}
                            <button class="action-btn remove-btn" onclick="app.removeCustomWord('${wordData.id}')" title="Удалить слово">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="word-translation">${wordData.translation}</div>
                    <div class="word-level">${wordData.level} • Пользовательское</div>
                </div>
            `;
        }).join('');
    }

    // Audio Management
    async playAudio(word, accent = 'uk') {
        const processedWord = word.toLowerCase().replace(/[^a-z]/g, '');
        
        // Show loading state
        const playButtons = document.querySelectorAll(`[onclick*="playAudio('${word}')"]`);
        playButtons.forEach(btn => {
            const originalContent = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            btn.disabled = true;
            btn.dataset.originalContent = originalContent;
        });

        // Direct URLs to wooordhunt audio files
        const ukUrl = `https://wooordhunt.ru/data/sound/sow/uk/${processedWord}.mp3`;
        const usUrl = `https://wooordhunt.ru/data/sound/sow/us/${processedWord}.mp3`;

        try {
            // Try preferred accent first
            const primaryUrl = accent === 'uk' ? ukUrl : usUrl;
            const fallbackUrl = accent === 'uk' ? usUrl : ukUrl;
            
            let audioPlayed = false;
            
            try {
                await this.tryPlayAudio(primaryUrl);
                audioPlayed = true;
                this.showNotification(`Воспроизведение (${accent === 'uk' ? 'британский' : 'американский'} акцент)`, 'info');
            } catch (error) {
                console.log(`Failed to play ${accent} accent, trying fallback...`);
                try {
                    await this.tryPlayAudio(fallbackUrl);
                    audioPlayed = true;
                    this.showNotification(`Воспроизведение (${accent === 'uk' ? 'американский' : 'британский'} акцент)`, 'info');
                } catch (fallbackError) {
                    console.log('Both audio sources failed');
                }
            }
            
            if (!audioPlayed) {
                this.showNotification('Аудио для этого слова недоступно', 'warning');
            }
            
        } catch (error) {
            console.error('Audio playback error:', error);
            this.showNotification('Ошибка воспроизведения аудио', 'error');
        } finally {
            // Restore button state
            setTimeout(() => {
                playButtons.forEach(btn => {
                    const originalContent = btn.dataset.originalContent || '<i class="fas fa-play"></i>';
                    btn.innerHTML = originalContent;
                    btn.disabled = false;
                    delete btn.dataset.originalContent;
                });
            }, 1000);
        }
    }

    tryPlayAudio(url) {
        return new Promise((resolve, reject) => {
            const audio = new Audio();
            
            audio.oncanplaythrough = () => {
                audio.play()
                    .then(() => {
                        resolve();
                    })
                    .catch(reject);
            };
            
            audio.onerror = () => {
                reject(new Error(`Failed to load audio: ${url}`));
            };
            
            audio.onloadstart = () => {
                console.log(`Loading audio: ${url}`);
            };
            
            // Set timeout for loading
            const timeout = setTimeout(() => {
                reject(new Error('Audio load timeout'));
            }, 8000);
            
            audio.oncanplaythrough = () => {
                clearTimeout(timeout);
                audio.play()
                    .then(resolve)
                    .catch(reject);
            };
            
            // Start loading
            audio.src = url;
            audio.load();
        });
    }

    // Add accent selection
    showAccentSelector(word) {
        const modal = document.createElement('div');
        modal.className = 'accent-modal';
        modal.innerHTML = `
            <div class="accent-modal-content">
                <h3>Выберите произношение</h3>
                <div class="accent-buttons">
                    <button class="accent-btn" onclick="app.playAudio('${word}', 'us'); app.closeAccentModal()">
                        <i class="fas fa-flag-usa"></i>
                        Американский
                    </button>
                    <button class="accent-btn" onclick="app.playAudio('${word}', 'uk'); app.closeAccentModal()">
                        <i class="fas fa-flag"></i>
                        Британский
                    </button>
                </div>
                <button class="close-modal" onclick="app.closeAccentModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        // Add modal styles
        Object.assign(modal.style, {
            position: 'fixed',
            top: '0',
            left: '0',
            width: '100%',
            height: '100%',
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: '1000'
        });

        document.body.appendChild(modal);
        this.currentModal = modal;
    }

    closeAccentModal() {
        if (this.currentModal) {
            this.currentModal.remove();
            this.currentModal = null;
        }
    }

    // UI Updates
    updateUI() {
        // Update learning count
        const learningCount = document.getElementById('learningCount');
        if (learningCount) {
            learningCount.textContent = `${this.learningWords.length} слов`;
        }

        // Update word counts in level cards
        document.querySelectorAll('.level-card').forEach(card => {
            const level = card.dataset.level;
            const wordCount = card.querySelector('.word-count');
            const dbWords = oxfordWordsDatabase[level] ? oxfordWordsDatabase[level].length : 0;
            const customWords = this.customWords.filter(w => w.level === level).length;
            const total = dbWords + customWords;
            wordCount.textContent = `${total} слов`;
        });
    }

    // Notifications
    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <i class="fas fa-${this.getNotificationIcon(type)}"></i>
            <span>${message}</span>
        `;

        // Add styles
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            background: this.getNotificationColor(type),
            color: 'white',
            padding: '12px 16px',
            borderRadius: '8px',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            zIndex: '1000',
            fontSize: '14px',
            fontWeight: '500',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });

        document.body.appendChild(notification);

        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // Remove after delay
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    getNotificationIcon(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        return icons[type] || 'info-circle';
    }

    getNotificationColor(type) {
        const colors = {
            success: '#10b981',
            error: '#ef4444',
            warning: '#f59e0b',
            info: '#3b82f6'
        };
        return colors[type] || '#3b82f6';
    }

    // Spaced Repetition Algorithm (based on SuperMemo 2)
    updateSpacedRepetition(word, isCorrect) {
        const data = word.repetitionData;
        data.totalAnswers++;
        
        if (isCorrect === true) {
            data.correctAnswers++;
            data.repetitions++;
            
            if (data.repetitions === 1) {
                data.interval = 1;
            } else if (data.repetitions === 2) {
                data.interval = 6;
            } else {
                data.interval = Math.round(data.interval * data.easeFactor);
            }
            
            // Adjust ease factor based on performance
            data.easeFactor = data.easeFactor + (0.1 - (5 - 4) * (0.08 + (5 - 4) * 0.02));
            data.difficulty = Math.max(0, data.difficulty - 0.1);
            
        } else if (isCorrect === 'partial') {
            data.correctAnswers += 0.5;
            data.repetitions = Math.max(1, data.repetitions);
            data.interval = Math.max(1, Math.round(data.interval * 0.8));
            data.easeFactor = Math.max(1.3, data.easeFactor - 0.15);
            data.difficulty = Math.min(2, data.difficulty + 0.1);
            
        } else {
            // Incorrect answer
            data.repetitions = 0;
            data.interval = 1;
            data.easeFactor = Math.max(1.3, data.easeFactor - 0.2);
            data.difficulty = Math.min(2, data.difficulty + 0.3);
        }
        
        // Ensure minimum values
        data.easeFactor = Math.max(1.3, data.easeFactor);
        data.interval = Math.max(1, data.interval);
        data.difficulty = Math.max(0, Math.min(2, data.difficulty));
        
        // Calculate next review date
        const nextReview = new Date();
        nextReview.setDate(nextReview.getDate() + data.interval);
        data.nextReview = nextReview.toISOString();
        data.lastReview = new Date().toISOString();
        
        // Update difficulty level for sorting
        if (data.totalAnswers >= 3) {
            const accuracy = data.correctAnswers / data.totalAnswers;
            if (accuracy >= 0.8) {
                data.difficulty = 0; // Easy
            } else if (accuracy >= 0.6) {
                data.difficulty = 1; // Medium
            } else {
                data.difficulty = 2; // Hard
            }
        }
        
        this.saveData();
        this.updateUI();
    }

    // Migration function for existing words without repetition data
    migrateExistingWords() {
        let migrated = false;
        
        this.learningWords.forEach(word => {
            if (!word.repetitionData) {
                word.repetitionData = {
                    easeFactor: 2.5,
                    interval: 1,
                    repetitions: 0,
                    nextReview: new Date().toISOString(),
                    lastReview: null,
                    correctAnswers: 0,
                    totalAnswers: 0,
                    difficulty: 0
                };
                migrated = true;
            }
        });
        
        if (migrated) {
            this.saveData();
        }
    }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.app = new EnglishWordsApp();
});

// Add some additional CSS for learned words
const additionalStyles = `
    .word-card.learned {
        opacity: 0.7;
        background: var(--bg-tertiary);
    }
    
    .learned-badge {
        background: var(--accent-color);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: inline-block;
    }
`;

// Inject additional styles
const styleSheet = document.createElement('style');
styleSheet.textContent = additionalStyles;
document.head.appendChild(styleSheet);

// Initialize the application
let app;
document.addEventListener('DOMContentLoaded', function() {
    app = new EnglishWordsApp();
});

_____

parse_oxford_words.py :

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import json

def parse_oxford_words():
    """Parse Oxford 3000 words from text file and create structured database"""
    
    # Read the text file
    with open('/home/ubuntu/oxford_words.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Dictionary to store words by level
    words_by_level = {
        'A1': [],
        'A2': [],
        'B1': [],
        'B2': []
    }
    
    # Basic translations for common words (simplified for demo)
    basic_translations = {
        # A1 level common words
        'a': 'один, одна, одно',
        'an': 'один, одна, одно',
        'about': 'о, около',
        'above': 'над, выше',
        'across': 'через',
        'action': 'действие',
        'activity': 'деятельность',
        'actor': 'актер',
        'actress': 'актриса',
        'add': 'добавлять',
        'address': 'адрес',
        'adult': 'взрослый',
        'advice': 'совет',
        'afraid': 'боящийся',
        'after': 'после',
        'afternoon': 'день',
        'again': 'снова',
        'age': 'возраст',
        'ago': 'назад',
        'agree': 'соглашаться',
        'air': 'воздух',
        'airport': 'аэропорт',
        'all': 'все',
        'also': 'также',
        'always': 'всегда',
        'amazing': 'удивительный',
        'and': 'и',
        'angry': 'злой',
        'animal': 'животное',
        'another': 'другой',
        'answer': 'ответ',
        'any': 'любой',
        'anyone': 'кто-нибудь',
        'anything': 'что-нибудь',
        'apartment': 'квартира',
        'apple': 'яблоко',
        'april': 'апрель',
        'area': 'область',
        'arm': 'рука',
        'around': 'вокруг',
        'arrive': 'прибывать',
        'art': 'искусство',
        'article': 'статья',
        'artist': 'художник',
        'as': 'как',
        'ask': 'спрашивать',
        'at': 'в, на',
        'august': 'август',
        'aunt': 'тетя',
        'autumn': 'осень',
        'away': 'прочь',
        'baby': 'ребенок',
        'back': 'назад',
        'bad': 'плохой',
        'bag': 'сумка',
        'ball': 'мяч',
        'banana': 'банан',
        'band': 'группа',
        'bank': 'банк',
        'bath': 'ванна',
        'bathroom': 'ванная',
        'be': 'быть',
        'beach': 'пляж',
        'beautiful': 'красивый',
        'because': 'потому что',
        'become': 'становиться',
        'bed': 'кровать',
        'bedroom': 'спальня',
        'beer': 'пиво',
        'before': 'до',
        'begin': 'начинать',
        'beginning': 'начало',
        'behind': 'за',
        'believe': 'верить',
        'below': 'ниже',
        'best': 'лучший',
        'better': 'лучше',
        'between': 'между',
        'bicycle': 'велосипед',
        'big': 'большой',
        'bike': 'велосипед',
        'bill': 'счет',
        'bird': 'птица',
        'birthday': 'день рождения',
        'black': 'черный',
        'blog': 'блог',
        'blonde': 'блондин',
        'blue': 'синий',
        'boat': 'лодка',
        'body': 'тело',
        'book': 'книга',
        'boot': 'ботинок',
        'bored': 'скучающий',
        'boring': 'скучный',
        'born': 'рожденный',
        'both': 'оба',
        'bottle': 'бутылка',
        'box': 'коробка',
        'boy': 'мальчик',
        'boyfriend': 'парень',
        'bread': 'хлеб',
        'break': 'ломать',
        'breakfast': 'завтрак',
        'bring': 'приносить',
        'brother': 'брат',
        'brown': 'коричневый',
        'build': 'строить',
        'building': 'здание',
        'bus': 'автобус',
        'business': 'бизнес',
        'busy': 'занятый',
        'but': 'но',
        'butter': 'масло',
        'buy': 'покупать',
        'by': 'у, около',
        'bye': 'пока',
        'cafe': 'кафе',
        'cake': 'торт',
        'call': 'звонить',
        'camera': 'камера',
        'can': 'мочь',
        'cannot': 'не мочь',
        'capital': 'столица',
        'car': 'машина',
        'card': 'карта',
        'career': 'карьера',
        'carrot': 'морковь',
        'carry': 'нести',
        'cat': 'кот',
        'cd': 'диск',
        'cent': 'цент',
        'centre': 'центр',
        'century': 'век',
        'chair': 'стул',
        'change': 'изменять',
        'chart': 'график',
        'cheap': 'дешевый',
        'check': 'проверять',
        'cheese': 'сыр',
        'chicken': 'курица',
        'child': 'ребенок',
        'chocolate': 'шоколад',
        'choose': 'выбирать',
        'cinema': 'кинотеатр',
        'city': 'город',
        'class': 'класс',
        'classroom': 'классная комната',
        'clean': 'чистый',
        'climb': 'лазить',
        'clock': 'часы',
        'close': 'закрывать',
        'clothes': 'одежда',
        'club': 'клуб',
        'coat': 'пальто',
        'coffee': 'кофе',
        'cold': 'холодный',
        'college': 'колледж',
        'colour': 'цвет',
        'come': 'приходить',
        'common': 'общий',
        'company': 'компания',
        'compare': 'сравнивать',
        'complete': 'полный',
        'computer': 'компьютер',
        'concert': 'концерт',
        'conversation': 'разговор',
        'cook': 'готовить',
        'cooking': 'готовка',
        'cool': 'прохладный',
        'correct': 'правильный',
        'cost': 'стоить',
        'could': 'мог бы',
        'country': 'страна',
        'course': 'курс',
        'cousin': 'двоюродный брат',
        'cow': 'корова',
        'cream': 'крем',
        'create': 'создавать',
        'culture': 'культура',
        'cup': 'чашка',
        'customer': 'клиент',
        'cut': 'резать',
        'dad': 'папа',
        'dance': 'танцевать',
        'dancer': 'танцор',
        'dancing': 'танцы',
        'dangerous': 'опасный',
        'dark': 'темный',
        'date': 'дата',
        'daughter': 'дочь',
        'day': 'день',
        'dear': 'дорогой',
        'december': 'декабрь',
        'decide': 'решать',
        'delicious': 'вкусный',
        'describe': 'описывать',
        'description': 'описание',
        'design': 'дизайн',
        'desk': 'стол',
        'detail': 'деталь',
        'dialogue': 'диалог',
        'dictionary': 'словарь',
        'die': 'умирать',
        'diet': 'диета',
        'difference': 'разница',
        'different': 'разный',
        'difficult': 'трудный',
        'dinner': 'ужин',
        'dirty': 'грязный',
        'discuss': 'обсуждать',
        'dish': 'блюдо',
        'do': 'делать',
        'doctor': 'врач',
        'dog': 'собака',
        'dollar': 'доллар',
        'door': 'дверь',
        'down': 'вниз',
        'downstairs': 'внизу',
        'draw': 'рисовать',
        'dress': 'платье',
        'drink': 'пить',
        'drive': 'водить',
        'driver': 'водитель',
        'during': 'во время',
        'dvd': 'диск',
        'each': 'каждый',
        'ear': 'ухо',
        'early': 'рано',
        'east': 'восток',
        'easy': 'легкий',
        'eat': 'есть',
        'egg': 'яйцо',
        'eight': 'восемь',
        'eighteen': 'восемнадцать',
        'eighty': 'восемьдесят',
        'elephant': 'слон',
        'eleven': 'одиннадцать',
        'else': 'еще',
        'email': 'электронная почта',
        'end': 'конец',
        'enjoy': 'наслаждаться',
        'enough': 'достаточно',
        'euro': 'евро',
        'even': 'даже',
        'evening': 'вечер',
        'event': 'событие',
        'ever': 'когда-либо',
        'every': 'каждый',
        'everybody': 'все',
        'everyone': 'все',
        'everything': 'все',
        'exam': 'экзамен',
        'example': 'пример',
        'excited': 'взволнованный',
        'exciting': 'захватывающий',
        'exercise': 'упражнение',
        'expensive': 'дорогой',
        'explain': 'объяснять',
        'extra': 'дополнительный',
        'eye': 'глаз',
        'face': 'лицо',
        'fact': 'факт',
        'fall': 'падать',
        'false': 'ложный',
        'family': 'семья',
        'famous': 'знаменитый',
        'fantastic': 'фантастический',
        'far': 'далеко',
        'farm': 'ферма',
        'farmer': 'фермер',
        'fast': 'быстрый',
        'fat': 'толстый',
        'father': 'отец',
        'favourite': 'любимый',
        'february': 'февраль',
        'feel': 'чувствовать',
        'feeling': 'чувство',
        'festival': 'фестиваль',
        'few': 'несколько',
        'fifteen': 'пятнадцать',
        'fifth': 'пятый',
        'fifty': 'пятьдесят',
        'fill': 'заполнять',
        'film': 'фильм',
        'final': 'финальный',
        'find': 'находить',
        'fine': 'хорошо',
        'finish': 'заканчивать',
        'fire': 'огонь',
        'first': 'первый',
        'fish': 'рыба',
        'five': 'пять',
        'flat': 'квартира',
        'flight': 'полет',
        'floor': 'пол',
        'flower': 'цветок',
        'fly': 'летать',
        'follow': 'следовать',
        'food': 'еда',
        'foot': 'нога',
        'football': 'футбол',
        'for': 'для',
        'forget': 'забывать',
        'form': 'форма',
        'forty': 'сорок',
        'four': 'четыре',
        'fourteen': 'четырнадцать',
        'fourth': 'четвертый',
        'free': 'свободный',
        'friday': 'пятница',
        'friend': 'друг',
        'friendly': 'дружелюбный',
        'from': 'из',
        'front': 'перед',
        'fruit': 'фрукт',
        'full': 'полный',
        'fun': 'веселье',
        'funny': 'смешной',
        'future': 'будущее',
        'game': 'игра',
        'garden': 'сад',
        'geography': 'география',
        'get': 'получать',
        'girl': 'девочка',
        'girlfriend': 'девушка',
        'give': 'давать',
        'glass': 'стекло',
        'go': 'идти',
        'good': 'хороший',
        'goodbye': 'до свидания',
        'grandfather': 'дедушка',
        'grandmother': 'бабушка',
        'grandparent': 'дедушка/бабушка',
        'great': 'великий',
        'green': 'зеленый',
        'grey': 'серый',
        'group': 'группа',
        'grow': 'расти',
        'guess': 'угадывать',
        'guitar': 'гитара',
        'gym': 'спортзал',
        'hair': 'волосы',
        'half': 'половина',
        'hand': 'рука',
        'happen': 'происходить',
        'happy': 'счастливый',
        'hard': 'трудный',
        'hat': 'шляпа',
        'hate': 'ненавидеть',
        'have': 'иметь',
        'he': 'он',
        'head': 'голова',
        'health': 'здоровье',
        'healthy': 'здоровый',
        'hear': 'слышать',
        'hello': 'привет',
        'help': 'помогать',
        'her': 'ее',
        'here': 'здесь',
        'hey': 'эй',
        'hi': 'привет',
        'high': 'высокий',
        'him': 'его',
        'his': 'его',
        'history': 'история',
        'hobby': 'хобби',
        'holiday': 'праздник',
        'home': 'дом',
        'homework': 'домашнее задание',
        'hope': 'надеяться',
        'horse': 'лошадь',
        'hospital': 'больница',
        'hot': 'горячий',
        'hotel': 'отель',
        'hour': 'час',
        'house': 'дом',
        'how': 'как',
        'however': 'однако',
        'hundred': 'сто',
        'hungry': 'голодный',
        'husband': 'муж',
        'i': 'я',
        'ice': 'лед',
        'idea': 'идея',
        'if': 'если',
        'imagine': 'представлять',
        'important': 'важный',
        'improve': 'улучшать',
        'in': 'в',
        'include': 'включать',
        'information': 'информация',
        'interest': 'интерес',
        'interested': 'заинтересованный',
        'interesting': 'интересный',
        'internet': 'интернет',
        'interview': 'интервью',
        'into': 'в',
        'introduce': 'представлять',
        'island': 'остров',
        'it': 'это',
        'its': 'его',
        'jacket': 'куртка',
        'january': 'январь',
        'jeans': 'джинсы',
        'job': 'работа',
        'join': 'присоединяться',
        'journey': 'путешествие',
        'juice': 'сок',
        'july': 'июль',
        'june': 'июнь',
        'just': 'просто',
        'keep': 'держать',
        'key': 'ключ',
        'kilometre': 'километр',
        'kind': 'добрый',
        'kitchen': 'кухня',
        'know': 'знать',
        'land': 'земля',
        'language': 'язык',
        'large': 'большой',
        'last': 'последний',
        'late': 'поздний',
        'later': 'позже',
        'laugh': 'смеяться',
        'learn': 'учиться',
        'leave': 'покидать',
        'left': 'левый',
        'leg': 'нога',
        'lesson': 'урок',
        'let': 'позволять',
        'letter': 'письмо',
        'library': 'библиотека',
        'lie': 'лежать',
        'life': 'жизнь',
        'light': 'свет',
        'like': 'нравиться',
        'line': 'линия',
        'lion': 'лев',
        'list': 'список',
        'listen': 'слушать',
        'little': 'маленький',
        'live': 'жить',
        'local': 'местный',
        'long': 'длинный',
        'look': 'смотреть',
        'lose': 'терять',
        'lot': 'много',
        'love': 'любить',
        'lunch': 'обед',
        'machine': 'машина',
        'magazine': 'журнал',
        'main': 'главный',
        'make': 'делать',
        'man': 'мужчина',
        'many': 'много',
        'map': 'карта',
        'march': 'март',
        'market': 'рынок',
        'married': 'женатый',
        'match': 'матч',
        'may': 'май',
        'maybe': 'может быть',
        'me': 'мне',
        'meal': 'еда',
        'mean': 'означать',
        'meaning': 'значение',
        'meat': 'мясо',
        'meet': 'встречать',
        'meeting': 'встреча',
        'member': 'член',
        'menu': 'меню',
        'message': 'сообщение',
        'metre': 'метр',
        'midnight': 'полночь',
        'mile': 'миля',
        'milk': 'молоко',
        'million': 'миллион',
        'minute': 'минута',
        'miss': 'скучать',
        'mistake': 'ошибка',
        'model': 'модель',
        'modern': 'современный',
        'moment': 'момент',
        'monday': 'понедельник',
        'money': 'деньги',
        'month': 'месяц',
        'more': 'больше',
        'morning': 'утро',
        'most': 'большинство',
        'mother': 'мать',
        'mountain': 'гора',
        'mouse': 'мышь',
        'mouth': 'рот',
        'move': 'двигаться',
        'movie': 'фильм',
        'much': 'много',
        'mum': 'мама',
        'museum': 'музей',
        'music': 'музыка',
        'must': 'должен',
        'my': 'мой',
        'name': 'имя',
        'natural': 'естественный',
        'near': 'рядом',
        'need': 'нуждаться',
        'negative': 'отрицательный',
        'neighbour': 'сосед',
        'never': 'никогда',
        'new': 'новый',
        'news': 'новости',
        'newspaper': 'газета',
        'next': 'следующий',
        'nice': 'хороший',
        'night': 'ночь',
        'nine': 'девять',
        'nineteen': 'девятнадцать',
        'ninety': 'девяносто',
        'no': 'нет',
        'nobody': 'никто',
        'north': 'север',
        'nose': 'нос',
        'not': 'не',
        'note': 'заметка',
        'nothing': 'ничего',
        'november': 'ноябрь',
        'now': 'сейчас',
        'number': 'число',
        'nurse': 'медсестра',
        'object': 'объект',
        'october': 'октябрь',
        'of': 'из',
        'off': 'выключенный',
        'office': 'офис',
        'often': 'часто',
        'oh': 'о',
        'ok': 'хорошо',
        'old': 'старый',
        'on': 'на',
        'once': 'однажды',
        'one': 'один',
        'onion': 'лук',
        'online': 'онлайн',
        'only': 'только',
        'open': 'открывать',
        'opinion': 'мнение',
        'opposite': 'противоположный',
        'or': 'или',
        'orange': 'оранжевый',
        'order': 'заказ',
        'other': 'другой',
        'our': 'наш',
        'out': 'из',
        'outside': 'снаружи',
        'over': 'над',
        'own': 'собственный',
        'page': 'страница',
        'paint': 'красить',
        'painting': 'картина',
        'pair': 'пара',
        'paper': 'бумага',
        'paragraph': 'параграф',
        'parent': 'родитель',
        'park': 'парк',
        'part': 'часть',
        'partner': 'партнер',
        'party': 'вечеринка',
        'passport': 'паспорт',
        'past': 'прошлое',
        'pay': 'платить',
        'pen': 'ручка',
        'pencil': 'карандаш',
        'people': 'люди',
        'pepper': 'перец',
        'perfect': 'идеальный',
        'period': 'период',
        'person': 'человек',
        'personal': 'личный',
        'phone': 'телефон',
        'photo': 'фото',
        'photograph': 'фотография',
        'phrase': 'фраза',
        'piano': 'пианино',
        'picture': 'картинка',
        'piece': 'кусок',
        'pig': 'свинья',
        'pink': 'розовый',
        'place': 'место',
        'plan': 'план',
        'plane': 'самолет',
        'plant': 'растение',
        'play': 'играть',
        'player': 'игрок',
        'please': 'пожалуйста',
        'point': 'точка',
        'police': 'полиция',
        'policeman': 'полицейский',
        'pool': 'бассейн',
        'poor': 'бедный',
        'popular': 'популярный',
        'positive': 'положительный',
        'possible': 'возможный',
        'post': 'почта',
        'potato': 'картофель',
        'pound': 'фунт',
        'practice': 'практика',
        'practise': 'практиковать',
        'prefer': 'предпочитать',
        'prepare': 'готовить',
        'present': 'подарок',
        'pretty': 'красивый',
        'price': 'цена',
        'probably': 'вероятно',
        'problem': 'проблема',
        'product': 'продукт',
        'programme': 'программа',
        'project': 'проект',
        'purple': 'фиолетовый',
        'put': 'класть',
        'quarter': 'четверть',
        'question': 'вопрос',
        'quick': 'быстрый',
        'quickly': 'быстро',
        'quiet': 'тихий',
        'quite': 'довольно',
        'radio': 'радио',
        'rain': 'дождь',
        'read': 'читать',
        'reader': 'читатель',
        'reading': 'чтение',
        'ready': 'готовый',
        'real': 'настоящий',
        'really': 'действительно',
        'reason': 'причина',
        'red': 'красный',
        'relax': 'расслабляться',
        'remember': 'помнить',
        'repeat': 'повторять',
        'report': 'отчет',
        'restaurant': 'ресторан',
        'result': 'результат',
        'return': 'возвращаться',
        'rice': 'рис',
        'rich': 'богатый',
        'ride': 'ездить',
        'right': 'правый',
        'river': 'река',
        'road': 'дорога',
        'room': 'комната',
        'routine': 'рутина',
        'rule': 'правило',
        'run': 'бегать',
        'sad': 'грустный',
        'salad': 'салат',
        'salt': 'соль',
        'same': 'тот же',
        'sandwich': 'бутерброд',
        'saturday': 'суббота',
        'say': 'говорить',
        'school': 'школа',
        'science': 'наука',
        'scientist': 'ученый',
        'sea': 'море',
        'second': 'второй',
        'section': 'секция',
        'see': 'видеть',
        'sell': 'продавать',
        'send': 'отправлять',
        'sentence': 'предложение',
        'september': 'сентябрь',
        'seven': 'семь',
        'seventeen': 'семнадцать',
        'seventy': 'семьдесят',
        'share': 'делиться',
        'she': 'она',
        'sheep': 'овца',
        'shirt': 'рубашка',
        'shoe': 'обувь',
        'shop': 'магазин',
        'shopping': 'покупки',
        'short': 'короткий',
        'should': 'следует',
        'show': 'показывать',
        'shower': 'душ',
        'sick': 'больной',
        'similar': 'похожий',
        'sing': 'петь',
        'singer': 'певец',
        'sister': 'сестра',
        'sit': 'сидеть',
        'situation': 'ситуация',
        'six': 'шесть',
        'sixteen': 'шестнадцать',
        'sixty': 'шестьдесят',
        'skill': 'навык',
        'skirt': 'юбка',
        'sleep': 'спать',
        'slow': 'медленный',
        'small': 'маленький',
        'snake': 'змея',
        'snow': 'снег',
        'so': 'так',
        'some': 'некоторый',
        'somebody': 'кто-то',
        'someone': 'кто-то',
        'something': 'что-то',
        'sometimes': 'иногда',
        'son': 'сын',
        'song': 'песня',
        'soon': 'скоро',
        'sorry': 'извините',
        'sound': 'звук',
        'soup': 'суп',
        'south': 'юг',
        'space': 'пространство',
        'speak': 'говорить',
        'special': 'особенный',
        'spell': 'произносить по буквам',
        'spelling': 'правописание',
        'spend': 'тратить',
        'sport': 'спорт',
        'spring': 'весна',
        'stand': 'стоять',
        'star': 'звезда',
        'start': 'начинать',
        'statement': 'утверждение',
        'station': 'станция',
        'stay': 'оставаться',
        'still': 'все еще',
        'stop': 'останавливаться',
        'story': 'история',
        'street': 'улица',
        'strong': 'сильный',
        'student': 'студент',
        'study': 'изучать',
        'style': 'стиль',
        'subject': 'предмет',
        'success': 'успех',
        'sugar': 'сахар',
        'summer': 'лето',
        'sun': 'солнце',
        'sunday': 'воскресенье',
        'supermarket': 'супермаркет',
        'sure': 'уверенный',
        'sweater': 'свитер',
        'swim': 'плавать',
        'swimming': 'плавание',
        'table': 'стол',
        'take': 'брать',
        'talk': 'говорить',
        'tall': 'высокий',
        'taxi': 'такси',
        'tea': 'чай',
        'teach': 'учить',
        'teacher': 'учитель',
        'team': 'команда',
        'teenager': 'подросток',
        'telephone': 'телефон',
        'television': 'телевидение',
        'tell': 'рассказывать',
        'ten': 'десять',
        'tennis': 'теннис',
        'terrible': 'ужасный',
        'test': 'тест',
        'text': 'текст',
        'than': 'чем',
        'thank': 'благодарить',
        'thanks': 'спасибо',
        'that': 'тот',
        'the': 'определенный артикль',
        'theatre': 'театр',
        'their': 'их',
        'them': 'их',
        'then': 'тогда',
        'there': 'там',
        'they': 'они',
        'thing': 'вещь',
        'think': 'думать',
        'third': 'третий',
        'thirsty': 'жаждущий',
        'thirteen': 'тринадцать',
        'thirty': 'тридцать',
        'this': 'этот',
        'thousand': 'тысяча',
        'three': 'три',
        'through': 'через',
        'thursday': 'четверг',
        'ticket': 'билет',
        'time': 'время',
        'tired': 'уставший',
        'title': 'заголовок',
        'to': 'к',
        'today': 'сегодня',
        'together': 'вместе',
        'toilet': 'туалет',
        'tomato': 'помидор',
        'tomorrow': 'завтра',
        'tonight': 'сегодня вечером',
        'too': 'тоже',
        'tooth': 'зуб',
        'topic': 'тема',
        'tourist': 'турист',
        'town': 'город',
        'traffic': 'движение',
        'train': 'поезд',
        'travel': 'путешествовать',
        'tree': 'дерево',
        'trip': 'поездка',
        'trousers': 'брюки',
        'true': 'правда',
        'try': 'пытаться',
        'tuesday': 'вторник',
        'turn': 'поворачивать',
        'tv': 'телевизор',
        'twelve': 'двенадцать',
        'twenty': 'двадцать',
        'twice': 'дважды',
        'two': 'два',
        'type': 'тип',
        'umbrella': 'зонт',
        'uncle': 'дядя',
        'under': 'под',
        'understand': 'понимать',
        'university': 'университет',
        'until': 'до',
        'up': 'вверх',
        'upstairs': 'наверху',
        'us': 'нас',
        'use': 'использовать',
        'useful': 'полезный',
        'usually': 'обычно',
        'vacation': 'отпуск',
        'vegetable': 'овощ',
        'very': 'очень',
        'video': 'видео',
        'village': 'деревня',
        'visit': 'посещать',
        'visitor': 'посетитель',
        'wait': 'ждать',
        'waiter': 'официант',
        'wake': 'просыпаться',
        'walk': 'ходить',
        'wall': 'стена',
        'want': 'хотеть',
        'warm': 'теплый',
        'wash': 'мыть',
        'watch': 'смотреть',
        'water': 'вода',
        'way': 'путь',
        'we': 'мы',
        'wear': 'носить',
        'weather': 'погода',
        'website': 'веб-сайт',
        'wednesday': 'среда',
        'week': 'неделя',
        'weekend': 'выходные',
        'welcome': 'добро пожаловать',
        'well': 'хорошо',
        'west': 'запад',
        'what': 'что',
        'when': 'когда',
        'where': 'где',
        'which': 'который',
        'white': 'белый',
        'who': 'кто',
        'why': 'почему',
        'wife': 'жена',
        'will': 'будет',
        'win': 'выигрывать',
        'window': 'окно',
        'wine': 'вино',
        'winter': 'зима',
        'with': 'с',
        'without': 'без',
        'woman': 'женщина',
        'wonderful': 'замечательный',
        'word': 'слово',
        'work': 'работать',
        'worker': 'рабочий',
        'world': 'мир',
        'would': 'бы',
        'write': 'писать',
        'writer': 'писатель',
        'writing': 'письмо',
        'wrong': 'неправильный',
        'yeah': 'да',
        'year': 'год',
        'yellow': 'желтый',
        'yes': 'да',
        'yesterday': 'вчера',
        'you': 'ты',
        'young': 'молодой',
        'your': 'твой',
        'yourself': 'себя'
    }
    
    # Split content by levels
    sections = re.split(r'\b(A1|A2|B1|B2)\b', content)
    
    current_level = None
    for section in sections:
        section = section.strip()
        if section in ['A1', 'A2', 'B1', 'B2']:
            current_level = section
        elif current_level and section:
            # Extract words from section
            words = extract_words_from_section(section, current_level, basic_translations)
            words_by_level[current_level].extend(words)
    
    return words_by_level

def extract_words_from_section(text, level, translations):
    """Extract words from a text section"""
    words = []
    
    # Remove page headers and footers
    text = re.sub(r'© Oxford University Press.*?\d+\s*/\s*\d+', '', text, flags=re.DOTALL)
    text = re.sub(r'The Oxford 3000™ by CEFR level', '', text)
    text = re.sub(r'--- PAGE \d+ ---', '', text)
    
    # Split by lines and process each line
    lines = text.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Extract words with their parts of speech
        # Pattern: word part_of_speech
        word_matches = re.findall(r'\b([a-zA-Z]+(?:\s+[a-zA-Z]+)*)\s+([a-z]+\.(?:,\s*[a-z]+\.)*)', line)
        
        for word_match in word_matches:
            word = word_match[0].lower().strip()
            pos = word_match[1]
            
            # Skip very short words or common function words
            if len(word) < 2 or word in ['a', 'an', 'the', 'of', 'to', 'and', 'or']:
                continue
                
            # Get translation or use placeholder
            translation = translations.get(word, f'перевод для {word}')
            
            # Determine category based on part of speech
            category = get_category_from_pos(pos)
            
            words.append({
                'word': word,
                'translation': translation,
                'category': category,
                'pos': pos
            })
    
    # Remove duplicates
    seen = set()
    unique_words = []
    for word_data in words:
        if word_data['word'] not in seen:
            seen.add(word_data['word'])
            unique_words.append(word_data)
    
    return unique_words[:50]  # Limit to 50 words per level for demo

def get_category_from_pos(pos):
    """Get category based on part of speech"""
    if 'n.' in pos:
        return 'nouns'
    elif 'v.' in pos:
        return 'verbs'
    elif 'adj.' in pos:
        return 'adjectives'
    elif 'adv.' in pos:
        return 'adverbs'
    elif 'prep.' in pos:
        return 'prepositions'
    elif 'conj.' in pos:
        return 'conjunctions'
    elif 'pron.' in pos:
        return 'pronouns'
    elif 'det.' in pos:
        return 'determiners'
    elif 'modal' in pos:
        return 'modal_verbs'
    elif 'number' in pos:
        return 'numbers'
    elif 'exclam.' in pos:
        return 'exclamations'
    else:
        return 'other'

if __name__ == '__main__':
    print("Parsing Oxford 3000 words...")
    words_data = parse_oxford_words()
    
    # Save to JavaScript file
    js_content = f"""// Oxford 3000 Words Database - Enhanced with real Oxford words
const oxfordWordsDatabase = {json.dumps(words_data, ensure_ascii=False, indent=2)};

// Export for use in application
if (typeof module !== 'undefined' && module.exports) {{
  module.exports = oxfordWordsDatabase;
}}"""
    
    with open('/home/ubuntu/english-words-app/oxford_words_data.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    # Print statistics
    total_words = sum(len(words) for words in words_data.values())
    print(f"Successfully parsed {total_words} words:")
    for level, words in words_data.items():
        print(f"  {level}: {len(words)} words")
    
    print("Oxford words database saved to oxford_words_data.js")

_______

styles.css :

/* CSS Variables for Theme */
:root {
  --primary-color: #6366f1;
  --primary-dark: #4f46e5;
  --secondary-color: #f1f5f9;
  --accent-color: #10b981;
  --danger-color: #ef4444;
  --warning-color: #f59e0b;
  
  --bg-primary: #ffffff;
  --bg-secondary: #f8fafc;
  --bg-tertiary: #f1f5f9;
  --text-primary: #1e293b;
  --text-secondary: #64748b;
  --text-muted: #94a3b8;
  
  --border-color: #e2e8f0;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;
}

/* Dark Theme */
[data-theme="dark"] {
  --bg-primary: #0f172a;
  --bg-secondary: #1e293b;
  --bg-tertiary: #334155;
  --text-primary: #f1f5f9;
  --text-secondary: #cbd5e1;
  --text-muted: #64748b;
  --border-color: #334155;
}

/* Reset and Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* App Container */
.app-container {
  max-width: 428px;
  margin: 0 auto;
  min-height: 100vh;
  background-color: var(--bg-primary);
  position: relative;
  box-shadow: var(--shadow-lg);
}

/* Header */
.app-header {
  background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
  color: white;
  padding: 1rem;
  position: sticky;
  top: 0;
  z-index: 100;
  box-shadow: var(--shadow-md);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.app-title {
  font-size: 1.5rem;
  font-weight: 700;
  margin: 0;
}

.header-actions {
  display: flex;
  gap: 0.5rem;
}

.theme-toggle {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: var(--radius-lg);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
}

.theme-toggle:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.05);
}

/* Main Content */
.main-content {
  padding: 1rem;
  padding-bottom: 100px; /* Space for bottom nav */
  min-height: calc(100vh - 80px);
}

/* Content Sections */
.content-section {
  display: none;
  animation: fadeIn 0.3s ease-in-out;
}

.content-section.active {
  display: block;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.section-header h2 {
  font-size: 1.75rem;
  font-weight: 700;
  color: var(--text-primary);
}

.section-stats {
  background: var(--bg-secondary);
  padding: 0.5rem 1rem;
  border-radius: var(--radius-lg);
  font-size: 0.875rem;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
}

/* About Section */
.about-content {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.feature-card {
  background: var(--bg-secondary);
  padding: 1.5rem;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border-color);
  transition: all 0.2s ease;
}

.feature-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.feature-icon {
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
  border-radius: var(--radius-lg);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.25rem;
  margin-bottom: 1rem;
}

.feature-card h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-primary);
}

.feature-card p {
  color: var(--text-secondary);
  line-height: 1.6;
}

.author-info {
  background: linear-gradient(135deg, var(--accent-color), #059669);
  color: white;
  padding: 1.5rem;
  border-radius: var(--radius-xl);
  text-align: center;
}

.author-info h3 {
  margin-bottom: 0.75rem;
  font-size: 1.25rem;
}

.author-info p {
  margin-bottom: 1rem;
  opacity: 0.9;
}

.author-link {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  color: white;
  text-decoration: none;
  background: rgba(255, 255, 255, 0.2);
  padding: 0.75rem 1.5rem;
  border-radius: var(--radius-lg);
  font-weight: 500;
  transition: all 0.2s ease;
}

.author-link:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
}

/* Levels Grid */
.levels-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.level-card {
  background: var(--bg-secondary);
  padding: 1.5rem;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border-color);
  text-align: center;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
}

.level-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}

.level-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
}

.level-badge {
  display: inline-block;
  padding: 0.5rem 1rem;
  border-radius: var(--radius-lg);
  font-weight: 700;
  font-size: 0.875rem;
  margin-bottom: 0.75rem;
  color: white;
}

.level-badge.beginner { background: #10b981; }
.level-badge.elementary { background: #3b82f6; }
.level-badge.intermediate { background: #8b5cf6; }
.level-badge.upper-intermediate { background: #f59e0b; }
.level-badge.advanced { background: #ef4444; }
.level-badge.proficiency { background: #6366f1; }

.level-card h3 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-primary);
}

.level-card p {
  color: var(--text-secondary);
  font-size: 0.875rem;
  margin-bottom: 1rem;
}

.level-stats {
  display: flex;
  justify-content: center;
}

.word-count {
  background: var(--bg-tertiary);
  padding: 0.25rem 0.75rem;
  border-radius: var(--radius-md);
  font-size: 0.75rem;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
}

/* Words Container */
.words-container {
  margin-top: 2rem;
}

.words-container.hidden {
  display: none;
}

.words-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.back-btn {
  background: var(--bg-secondary);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  padding: 0.75rem;
  border-radius: var(--radius-lg);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.875rem;
}

.back-btn:hover {
  background: var(--bg-tertiary);
  transform: translateX(-2px);
}

/* Words List */
.words-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.word-card {
  background: var(--bg-secondary);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-lg);
  padding: 1rem;
  transition: all 0.2s ease;
}

.word-card:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.word-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

.word-text {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--text-primary);
}

.word-actions {
  display: flex;
  gap: 0.5rem;
}

.action-btn {
  width: 36px;
  height: 36px;
  border: none;
  border-radius: var(--radius-md);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.875rem;
}

.play-btn {
  background: var(--primary-color);
  color: white;
}

.play-btn:hover {
  background: var(--primary-dark);
  transform: scale(1.05);
}

.add-btn {
  background: var(--accent-color);
  color: white;
}

.add-btn:hover {
  background: #059669;
  transform: scale(1.05);
}

.remove-btn {
  background: var(--danger-color);
  color: white;
}

.remove-btn:hover {
  background: #dc2626;
  transform: scale(1.05);
}

.learned-btn {
  background: var(--warning-color);
  color: white;
}

.learned-btn:hover {
  background: #d97706;
  transform: scale(1.05);
}

.word-translation {
  color: var(--text-secondary);
  font-size: 0.875rem;
}

.word-level {
  display: inline-block;
  background: var(--bg-tertiary);
  color: var(--text-muted);
  padding: 0.25rem 0.5rem;
  border-radius: var(--radius-sm);
  font-size: 0.75rem;
  margin-top: 0.5rem;
}

/* Add Word Form */
.add-word-form {
  background: var(--bg-secondary);
  padding: 1.5rem;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border-color);
  margin-bottom: 2rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--text-primary);
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  background: var(--bg-primary);
  color: var(--text-primary);
  font-size: 1rem;
  transition: all 0.2s ease;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.add-word-btn {
  width: 100%;
  background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
  color: white;
  border: none;
  padding: 0.875rem;
  border-radius: var(--radius-lg);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.add-word-btn:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-lg);
}

.add-word-btn:active {
  transform: translateY(0);
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 3rem 1rem;
  color: var(--text-muted);
}

.empty-state i {
  font-size: 3rem;
  margin-bottom: 1rem;
  opacity: 0.5;
}

.empty-state h3 {
  font-size: 1.25rem;
  margin-bottom: 0.5rem;
  color: var(--text-secondary);
}

.empty-state p {
  font-size: 0.875rem;
}

/* Bottom Navigation */
.bottom-nav {
  position: fixed;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 100%;
  max-width: 428px;
  background: var(--bg-primary);
  border-top: 1px solid var(--border-color);
  display: flex;
  padding: 0.75rem;
  gap: 0.5rem;
  box-shadow: 0 -4px 6px -1px rgb(0 0 0 / 0.1);
  z-index: 100;
}

.nav-item {
  flex: 1;
  background: none;
  border: none;
  color: var(--text-muted);
  padding: 0.75rem 0.5rem;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.75rem;
  font-weight: 500;
}

.nav-item i {
  font-size: 1.25rem;
}

.nav-item.active {
  background: var(--primary-color);
  color: white;
}

.nav-item:not(.active):hover {
  background: var(--bg-secondary);
  color: var(--text-primary);
}

/* Responsive Design */
@media (max-width: 480px) {
  .app-container {
    max-width: 100%;
  }
  
  .levels-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .nav-item span {
    font-size: 0.625rem;
  }
}

/* Loading Animation */
.loading {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
}

/* Accent Modal */
.accent-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  animation: fadeIn 0.2s ease;
}

.accent-modal-content {
  background: var(--bg-primary);
  border-radius: var(--radius-xl);
  padding: 2rem;
  max-width: 300px;
  width: 90%;
  text-align: center;
  position: relative;
  box-shadow: var(--shadow-lg);
  animation: slideUp 0.3s ease;
}

.accent-modal-content h3 {
  margin-bottom: 1.5rem;
  color: var(--text-primary);
  font-size: 1.25rem;
}

.accent-buttons {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1rem;
}

.accent-btn {
  background: var(--bg-secondary);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  padding: 1rem;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  font-size: 1rem;
  font-weight: 500;
}

.accent-btn:hover {
  background: var(--primary-color);
  color: white;
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.close-modal {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: var(--bg-secondary);
  border: 1px solid var(--border-color);
  color: var(--text-muted);
  width: 32px;
  height: 32px;
  border-radius: var(--radius-md);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.close-modal:hover {
  background: var(--danger-color);
  color: white;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Audio button states */
.play-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.play-btn.playing {
  background: var(--accent-color);
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

/* Data Management */
.data-management {
  background: var(--bg-secondary);
  padding: 1.5rem;
  border-radius: var(--radius-xl);
  border: 1px solid var(--border-color);
  text-align: center;
}

.data-management h3 {
  margin-bottom: 1rem;
  color: var(--text-primary);
  font-size: 1.25rem;
}

.data-buttons {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.data-btn {
  background: var(--bg-primary);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  padding: 0.75rem 1rem;
  border-radius: var(--radius-lg);
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  text-decoration: none;
}

.data-btn:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

.export-btn:hover {
  background: var(--accent-color);
  color: white;
  border-color: var(--accent-color);
}

.import-btn:hover {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}

.clear-btn:hover {
  background: var(--danger-color);
  color: white;
  border-color: var(--danger-color);
}

@media (min-width: 480px) {
  .data-buttons {
    flex-direction: row;
  }
}

/* Utility Classes */
.hidden {
  display: none !important;
}

.text-center {
  text-align: center;
}

.mt-1 { margin-top: 0.25rem; }
.mt-2 { margin-top: 0.5rem; }
.mt-3 { margin-top: 0.75rem; }
.mt-4 { margin-top: 1rem; }

.mb-1 { margin-bottom: 0.25rem; }
.mb-2 { margin-bottom: 0.5rem; }
.mb-3 { margin-bottom: 0.75rem; }
.mb-4 { margin-bottom: 1rem; }


/* Review System Styles */
.review-container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

.review-progress {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 30px;
}

.progress-bar {
    flex: 1;
    height: 8px;
    background: var(--bg-secondary);
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    transition: width 0.3s ease;
}

.progress-text {
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 14px;
}

.review-card {
    background: var(--bg-primary);
    border-radius: 16px;
    padding: 40px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
    min-height: 300px;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.card-front, .card-back {
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;
}

.word-display, .translation-display {
    margin-bottom: 30px;
}

.review-word {
    font-size: 48px;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 10px;
    word-break: break-word;
}

.review-translation {
    font-size: 32px;
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 10px;
    background: var(--bg-secondary);
    padding: 10px 20px;
    border-radius: 12px;
    box-shadow: var(--shadow-sm);
}x;
    font-weight: 600;
    color: var(--primary-color);
    margin-bottom: 10px;
}

.word-stats {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 15px;
}

.accuracy, .word-accuracy {
    font-size: 14px;
    color: var(--text-secondary);
    background: var(--bg-secondary);
    padding: 4px 12px;
    border-radius: 12px;
}

.difficulty, .word-difficulty {
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 8px;
    font-weight: 600;
}

.difficulty-0 {
    background: #d4edda;
    color: #155724;
}

.difficulty-1 {
    background: #fff3cd;
    color: #856404;
}

.difficulty-2 {
    background: #f8d7da;
    color: #721c24;
}

.card-actions {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
}

.answer-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 30px;
}

.answer-buttons .btn {
    min-width: 120px;
    padding: 12px 20px;
    font-weight: 600;
}

.review-controls {
    display: flex;
    justify-content: center;
    gap: 15px;
}

.review-complete {
    text-align: center;
    padding: 40px 20px;
}

.completion-icon {
    font-size: 64px;
    color: var(--accent-color);
    margin-bottom: 20px;
}

.completion-actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 30px;
}

/* Word Card Enhancements */
.word-card.needs-review {
    border-left: 4px solid var(--accent-color);
    background: linear-gradient(135deg, var(--bg-primary) 0%, rgba(255, 193, 7, 0.05) 100%);
}

.word-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
    margin-top: 8px;
}

.word-meta > span {
    font-size: 12px;
}

.review-badge {
    background: var(--accent-color);
    color: white;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 11px;
    font-weight: 600;
    margin-top: 8px;
    display: inline-block;
}

/* Loading Animation */
.fa-spinner {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .review-card {
        padding: 30px 20px;
        min-height: 250px;
    }
    
    .review-word {
        font-size: 36px;
    }
    
    .review-translation {
        font-size: 24px;
    }
    
    .answer-buttons {
        flex-direction: column;
        gap: 10px;
    }
    
    .answer-buttons .btn {
        min-width: auto;
        width: 100%;
    }
    
    .word-stats {
        flex-direction: column;
        gap: 8px;
    }
    
    .completion-actions {
        flex-direction: column;
        gap: 10px;
    }
    
    .review-controls {
        flex-direction: column;
        gap: 10px;
    }
}



/* Improved Review Card Styles */
.review-level {
    display: inline-block;
    background: var(--bg-tertiary);
    color: var(--text-muted);
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-lg);
    font-size: 0.75rem;
    font-weight: 500;
    margin-bottom: 20px;
}

.review-stats {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 0.75rem 1rem;
    background: var(--bg-secondary);
    border-radius: var(--radius-lg);
    font-size: 0.875rem;
}

.accuracy-display {
    color: var(--accent-color);
    font-weight: 600;
}

.difficulty-display {
    color: var(--text-secondary);
}

.difficulty-display.easy { color: var(--accent-color); }
.difficulty-display.medium { color: var(--warning-color); }
.difficulty-display.hard { color: var(--danger-color); }

/* Review Action Buttons */
.review-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 30px;
}

.review-btn {
    flex: 1;
    max-width: 120px;
    padding: 0.875rem 1rem;
    border: none;
    border-radius: var(--radius-lg);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.review-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.review-btn.dont-know {
    background: var(--danger-color);
    color: white;
}

.review-btn.dont-know:hover {
    background: #dc2626;
}

.review-btn.partially {
    background: var(--warning-color);
    color: white;
}

.review-btn.partially:hover {
    background: #d97706;
}

.review-btn.know {
    background: var(--accent-color);
    color: white;
}

.review-btn.know:hover {
    background: #059669;
}

.show-translation-btn {
    background: var(--primary-color);
    color: white;
    padding: 0.875rem 2rem;
    border: none;
    border-radius: var(--radius-lg);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    margin: 20px auto;
    display: block;
}

.show-translation-btn:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

/* Review Completion Screen */
.review-complete {
    text-align: center;
    padding: 2rem;
}

.completion-icon {
    font-size: 4rem;
    color: var(--accent-color);
    margin-bottom: 1.5rem;
}

.completion-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.completion-message {
    color: var(--text-secondary);
    font-size: 1.125rem;
    margin-bottom: 2rem;
}

.completion-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.completion-btn {
    padding: 0.875rem 1.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.completion-btn.primary {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.completion-btn.primary:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.completion-btn.secondary {
    background: var(--bg-secondary);
    color: var(--text-primary);
}

.completion-btn.secondary:hover {
    background: var(--bg-tertiary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

/* All Words Display */
.all-words-container {
    margin-top: 2rem;
}

.all-words-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: var(--bg-secondary);
    border-radius: var(--radius-lg);
    border: 1px solid var(--border-color);
}

.all-words-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
}

.words-filter {
    display: flex;
    gap: 0.5rem;
}

.filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    background: var(--bg-primary);
    color: var(--text-secondary);
    border-radius: var(--radius-md);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.filter-btn.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.filter-btn:hover:not(.active) {
    background: var(--bg-secondary);
    color: var(--text-primary);
}

.learning-words-grid {
    display: grid;
    gap: 1rem;
}

.learning-word-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    padding: 1.25rem;
    transition: all 0.2s ease;
    position: relative;
}

.learning-word-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.learning-word-card.learned {
    border-color: var(--accent-color);
    background: linear-gradient(135deg, var(--bg-secondary), rgba(16, 185, 129, 0.05));
}

.learning-word-card.learned::before {
    content: '✓';
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 24px;
    height: 24px;
    background: var(--accent-color);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: bold;
}

.learning-word-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.75rem;
}

.learning-word-text {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.learning-word-translation {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-bottom: 0.75rem;
}

.learning-word-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.75rem;
    color: var(--text-muted);
}

.word-progress {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.progress-indicator {
    width: 60px;
    height: 4px;
    background: var(--bg-tertiary);
    border-radius: 2px;
    overflow: hidden;
}

.progress-fill-mini {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    transition: width 0.3s ease;
}

.skip-controls {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 20px;
}

.skip-btn {
    padding: 0.75rem 1.5rem;
    border: 1px solid var(--border-color);
    background: var(--bg-secondary);
    color: var(--text-primary);
    border-radius: var(--radius-lg);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.skip-btn:hover {
    background: var(--bg-tertiary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
}



/* Show All Words Button */
.show-all-words-btn {
    background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
    color: white;
    border: none;
    border-radius: var(--radius-lg);
    padding: 1rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    box-shadow: var(--shadow-md);
    margin-top: 1.5rem;
    position: relative;
    overflow: hidden;
}

.show-all-words-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s ease;
}

.show-all-words-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    background: linear-gradient(135deg, var(--primary-dark), #4338ca);
}

.show-all-words-btn:hover::before {
    left: 100%;
}

.show-all-words-btn:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
}

.show-all-words-btn i {
    font-size: 1.125rem;
    transition: transform 0.3s ease;
}

.show-all-words-btn:hover i {
    transform: scale(1.1);
}

/* Responsive design for the button */
@media (max-width: 480px) {
    .show-all-words-btn {
        padding: 0.875rem 1.5rem;
        font-size: 0.9rem;
        gap: 0.5rem;
    }
    
    .show-all-words-btn i {
        font-size: 1rem;
    }
}

-----

words_data.js

 

